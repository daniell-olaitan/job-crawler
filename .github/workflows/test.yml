name: Auto Merge Pull Request

on:
  pull_request:
    types: [synchronize, opened, reopened]

jobs:
  test-and-merge:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          python -m unittest discover -s tests

      - name: Check if user is a collaborator
        id: collaborator_check
        uses: actions/github-script@v6
        with:
          script: |
            const { data: collaborators } = await github.repos.listCollaborators({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            const prUser = context.payload.pull_request.user.login;
            const isCollaborator = collaborators.some(collaborator => collaborator.login === prUser);

            core.setOutput('isCollaborator', isCollaborator);

      - name: Get PR information
        id: pr_info
        uses: actions/github-script@v6
        with:
          script: |
            const pr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            const mergeable = pr.data.mergeable;
            const mergeable_state = pr.data.mergeable_state;
            const approvals = await github.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });

            const hasApproval = approvals.data.filter(review => review.state === 'APPROVED').length > 0;
            core.setOutput('mergeable', mergeable && mergeable_state === 'clean');
            core.setOutput('hasApproval', hasApproval);

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Merge Pull Request if allowed
        if: steps.pr_info.outputs.mergeable == 'true' && (steps.collaborator_check.outputs.isCollaborator == 'true' || steps.pr_info.outputs.hasApproval == 'true')
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --squash --merge --admin
